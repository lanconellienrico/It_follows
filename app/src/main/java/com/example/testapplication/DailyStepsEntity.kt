package com.example.testapplication

import android.os.Build
import androidx.annotation.RequiresApi
import androidx.room.Entity
import androidx.room.PrimaryKey
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.time.LocalDate
import java.time.format.DateTimeFormatter

/**
 * DailyStepsEntity translate the count of the steps taken during a day,
 * both from a step-able activity and from the background step counter,
 * to an Entity to be registered in the Db, by:
 * - date (of the day)
 * - steps (number of steps taken)
 * - id (autogenerated - for Db)
 */
@Entity(tableName = "DailySteps")
@RequiresApi(Build.VERSION_CODES.O)
data class DailyStepsEntity(
    @PrimaryKey(autoGenerate = true)
    val id: Int = 0,

    val date: Long,
    val steps: Int
) {
    // insert this Entity into Db
    fun save(dao: DailyStepsDao){
        CoroutineScope(Dispatchers.IO).launch {
            dao.insert(this@DailyStepsEntity)
        }
    }

    // give date as a formatted String 25-11-2011
    fun getPrettyDate(): String{
        val dateFormat = DateTimeFormatter.ofPattern("dd-MM-yyyy")
        return LocalDate.ofEpochDay(date).format(dateFormat)
    }

    // give the day off the month (from 25-11-2011 -> return 25)
    fun getDayOfMonth(): Int{
        return LocalDate.ofEpochDay(date).dayOfMonth
    }
}